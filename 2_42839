import java.util.*;
class Solution {
    public static boolean[] table;
    public static Set<Integer> set = new LinkedHashSet<>();
    public int solution(String numbers) {
        table = new boolean[numbers.length()+1];
        dfs(0,numbers,"");
        return set.size();
    }
    public static void dfs(int depth,String numbers,String result){
        if(depth==numbers.length()){
            if(result.equals("")){
                return;
            }
            int num = Integer.parseInt(result);

            if(f1(num)) {
                if(num!=0&&num!=1)
                set.add(num);
            }
            return;
        }

        for(int i=0;i<numbers.length()+1;i++){
            if(!table[i]&&i!=numbers.length()){
                table[i]=true;
                result+=""+numbers.charAt(i);
                dfs(depth + 1, numbers, result);
                result=result.substring(0,result.length()-1);
                table[i]=false;
            }else if(i==numbers.length()){
                dfs(depth + 1, numbers, result);
            }


        }


    }
    public static boolean f1(int num){
        for(int i=2;i<num;i++){
            if(num%i==0){
                return false;
            }
        }
        return true;
    }


}
